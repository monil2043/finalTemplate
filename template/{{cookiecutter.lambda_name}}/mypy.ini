[mypy]
# Report an error whenever a function returns a value that is inferred to have type Any
warn_return_any=False
# Report any config options that are unused by mypy. (This will help us catch typos when making changes to our config file).
warn_unused_configs=True
# when an argument is optional, explicitly mention that it is optiona;
no_implicit_optional=True
# Warns about casting an expression to its inferred type.
warn_redundant_casts=True
# Warns about unneeded # type: ignore comments.
warn_unused_ignores=True
# Shows column numbers in error messages.
show_column_numbers = True
# Shows error codes in error messages
show_error_codes = True
# Prefixes each error with the relevant context.
show_error_context = True
# Pydantic also ships with a mypy plugin that adds a number of important pydantic-specific features to mypy that improve its ability to type-check your code.
plugins = pydantic.mypy

[pydantic-mypy]
# If the init_forbid_extra plugin setting is set to True, unexpected inputs to __init__ will raise errors even if Config.extra is not 'forbid'
init_forbid_extra = true
# If the init_typed plugin setting is set to True, the generated signature will use the types of the model fields (otherwise they will be annotated as Any to allow parsing).
init_typed = true
#If the warn_required_dynamic_aliases plugin setting is set to True, you'll get a mypy error any time you use a dynamically-determined alias or alias generator on a model with Config.allow_population_by_field_name=False. allow_population_by_field_name indicates whether an aliased field may be populated by its name as given by the model attribute, as well as the alias. Defaults to False.
warn_required_dynamic_aliases = true

# Disable specific error codes in the 'tests' package
[mypy-tests.*]
disable_error_code = annotation-unchecked
allow_untyped_defs = True

[mypy-jmespath]
ignore_missing_imports=True

[mypy-jmespath.exceptions]
ignore_missing_imports=True

[mypy-jmespath.functions]
ignore_missing_imports=True

[mypy-boto3]
ignore_missing_imports = True

[mypy-botocore]
ignore_missing_imports = True

[mypy-botocore.stub]
ignore_missing_imports = True

[mypy-botocore.response]
ignore_missing_imports = True

[mypy-boto3.dynamodb.conditions]
ignore_missing_imports = True

[mypy-botocore.config]
ignore_missing_imports = True

[mypy-botocore.compat]
ignore_missing_imports = True

[mypy-botocore.exceptions]
ignore_missing_imports = True

[mypy-aws_xray_sdk.ext.aiohttp.client]
ignore_missing_imports = True

[mypy-dataclasses]
ignore_missing_imports = True

[mypy-orjson]
ignore_missing_imports = True

[mypy-aiohttp]
ignore_missing_imports = True

[mypy-snappy]
ignore_missing_imports = True

[mypy-ijson]
ignore_missing_imports = True

[mypy-setuptools]
ignore_missing_imports = True
